sudo add-apt-repository	\
"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \
$(lsb_release -cs) \
stable"

docker run --name webserver -d -p 80:80 nginx

DOCKER_OPTS="--registry-mirror=https://registry.docker-cn.com"



sudo service docker restart

https://download.openvz.org/template/precreated/
http://www.runoob.com/docker/docker-search-command.html



changing DNS server to google DNS (8.8.8.8)
https://serverfault.com/questions/784443/tag-latest-not-found-in-repository-docker-io-library-nginx/784472
/etc/default/docker
# Use DOCKER_OPTS to modify the daemon startup options.
DOCKER_OPTS="--dns 8.8.8.8 --dns 8.8.4.4"




zx@kvm:~$ docker pull nginx
latest: Pulling from nginx
2cd56ba950c8: Pull complete
8ecf8a9b915f: Pull complete
2f035d3cb1ca: Pull complete
33ff728209b6: Pull complete
a8788126754a: Pull complete
3108c22fc26e: Pull complete
ba6703c9bbef: Pull complete
84ce84a95d1f: Pull complete
f558936b4da4: Pull complete
e681e65a20da: Pull complete
Digest: sha256:fbc8eb0a7a4f824c23798034207c531f5ff5a49c23d77b8cdbb315ff5b74f0fd
Status: Downloaded newer image for nginx:latest
zx@kvm:~$
zx@kvm:~$
zx@kvm:~$
zx@kvm:~$
zx@kvm:~$
zx@kvm:~$
zx@kvm:~$
zx@kvm:~$ docker images -a
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu              14.04               e8b280fce101        3 hours ago         404.7 MB
<none>              <none>              2f0e164a6ec4        3 hours ago         205.2 MB
nginx               latest              e681e65a20da        6 days ago          108.7 MB
<none>              <none>              f558936b4da4        6 days ago          108.7 MB
<none>              <none>              84ce84a95d1f        6 days ago          108.7 MB
<none>              <none>              ba6703c9bbef        6 days ago          108.7 MB
<none>              <none>              3108c22fc26e        6 days ago          108.7 MB
<none>              <none>              a8788126754a        6 days ago          55.27 MB
<none>              <none>              33ff728209b6        6 days ago          55.27 MB
<none>              <none>              2f035d3cb1ca        2 weeks ago         55.27 MB
<none>              <none>              2cd56ba950c8        2 weeks ago         55.27 MB
<none>              <none>              8ecf8a9b915f        2 weeks ago         55.27 MB
hello-world         latest              690d80202531        4 months ago        1.848 kB
<none>              <none>              074d6d4eea74        4 months ago        1.848 kB
zx@kvm:~$
zx@kvm:~$
zx@kvm:~$
zx@kvm:~$
zx@kvm:~$
zx@kvm:~$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu              14.04               e8b280fce101        3 hours ago         404.7 MB
<none>              <none>              2f0e164a6ec4        3 hours ago         205.2 MB
nginx               latest              e681e65a20da        6 days ago          108.7 MB
hello-world         latest              690d80202531        4 months ago        1.848 kB
zx@kvm:~$
zx@kvm:~$
zx@kvm:~$








https://blog.csdn.net/su272009/article/details/46415749	Ubuntu14.04（32位）下安装使用docker

zx@kvm:~$ docker run -i -t ubuntu:14.04 /bin/bash
root@8af6947b7eab:/#

    rm        Remove one or more containers
    rmi       Remove one or more images
zx@kvm:~$ docker rmi -f nginx
Untagged: nginx:latest
Deleted: e681e65a20da17dc355d3e54e5d9dcd6a384807ef78961fcebaf787abc0e4abe
Deleted: f558936b4da446dc85a09090beebb6204c12f536066cae100bb8a5bfecc91efe
Deleted: 84ce84a95d1fc26d013e31eb085d5b3ca5f0c921d883465e54f646f42f7386ba
Deleted: ba6703c9bbef65c81b70aa962e0e9708e6180c8a2b7783e776ea84c1081e6ab2
Deleted: 3108c22fc26e4d039dea2c851ce3dde247a39225ce7c5393c93cb23b129e7c12
Deleted: a8788126754a1b84d5c6b704d1a012058cb68c571dcca9a47eec881856eae468
Deleted: 33ff728209b673770408aa487cc482c5e080327ee90806a9d8014dfda75e019c
Deleted: 2f035d3cb1ca4940f2b1381ef7f2cb8ecda3e6f39967ce6bcb9ecd61e96ec667
Deleted: 8ecf8a9b915f2900deba3462bf5297e52ffd7b9b0f1cc91df5f553b6347d804e
Deleted: 2cd56ba950c8022a191c8cb76ad37a2d664530a0b812f332e01bb1de47d3feed
zx@kvm:~$

【这条命令会用	buntu:14.04 镜像启动一个容器，命名为u14】
【  -d, --detach=false  Run container in background and print container ID】
zx@kvm:~$ docker run --name u14 -it -d ubuntu:14.04 /bin/bash
e946f2477ea982e7cf77d55b5c896c7da5ae75ce69e9352a1ced590cef462035
e946f2477ea9	zx add 和下方 root@e946f2477ea9 一致
【使用 docker exec命令进入容器u14，修改其内容】
zx@kvm:~$ docker exec -it u14 /bin/bash
root@e946f2477ea9:/# echo "blabla" > etc/bla.blala
root@e946f2477ea9:/# ll /etc/bla.blala
-rw-r--r-- 1 root root 7 Mar 29 10:54 /etc/bla.blala
root@e946f2477ea9:/# exit
exit
zx@kvm:~$
【修改了容器的文件，也就是改动了容器的存储层。可以通过docker diff 命令看到具体的改动。】
zx@kvm:~$ docker diff u14
C /etc
A /etc/bla.blala
C /root
A /root/.bash_history
zx@kvm:~$
【再次进入容器u14，上次新增的文件还在】
zx@kvm:~$ docker exec -it u14 /bin/bash
root@e946f2477ea9:/#
root@e946f2477ea9:/# ll /etc/bla.blala
-rw-r--r-- 1 root root 7 Mar 29 10:54 /etc/bla.blala
root@e946f2477ea9:/#


【用下面的命令将容器保存为镜像】
zx@kvm:~$ docker commit --author "zx" --message "add /etc/bla.blala" u14 ubuntu:v2
9c3a12f73531b1a3b3bac8ebaa524660ef7397f01c507e8d07e5194f03a817af
zx@kvm:~$
zx@kvm:~$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu              v2                  9c3a12f73531        3 seconds ago       404.7 MB
ubuntu              14.04               e8b280fce101        26 hours ago        404.7 MB
<none>              <none>              2f0e164a6ec4        26 hours ago        205.2 MB
zx@kvm:~$
zx@kvm:~$ docker history ubuntu:v2
IMAGE               CREATED              CREATED BY          SIZE
9c3a12f73531        About a minute ago   /bin/bash           61 B
e8b280fce101        26 hours ago                             404.7 MB
zx@kvm:~$
【新的镜像ubuntu:v2定制好后，可以来运行这个镜像】
zx@kvm:~$ docker run --name u14v2 -it ubuntu:v2 /bin/bash
root@f2e9bb433402:/#
root@f2e9bb433402:/# ls etc/bla.blala
etc/bla.blala
root@f2e9bb433402:/#


root@f2e9bb433402:/# exit
exit
zx@kvm:~$
zx@kvm:~$ docker run --name u14v2 -it ubuntu:v2 /bin/bash
FATA[0000] Error response from daemon: Conflict. The name "u14v2" is already in use by container f2e9bb433402. You have to delete (or rename) that container to be able to reuse that name.
zx@kvm:~$
zx@kvm:~$ docker rm f2e9bb433402
f2e9bb433402
zx@kvm:~$
zx@kvm:~$ docker run --name u14v2 -it ubuntu:v2 /bin/bash
root@8e37779058e7:/#
root@8e37779058e7:/# ll /etc/bla.blala
-rw-r--r-- 1 root root 7 Mar 29 10:54 /etc/bla.blala
root@8e37779058e7:/# cat !$
cat /etc/bla.blala
blabla
root@8e37779058e7:/#



---------
【之前运行过镜像ubuntu:v2，产生了容器 u14v2，所以本次操作依然以u14v2命名容器显然会造成冲突】
zx@kvm:~$ docker run --name u14v2 -it ubuntu:v2 /bin/bash
FATA[0000] Error response from daemon: Conflict. The name "u14v2" is already in use by container 8e37779058e7. You have to delete (or rename) that container to be able to reuse that name.
zx@kvm:~$
【查看所有的容器数据，可以看到这一条信息】
zx@kvm:~$ docker ps -a
CONTAINER ID        IMAGE                COMMAND                CREATED              STATUS                  PORTS               NAMES
8e37779058e7        ubuntu:v2            "/bin/bash"            5 days ago           Exited (0) 5 days ago                       u14v2
【使用CONTAINER ID 启动容器】
zx@kvm:~$ docker start -i 8e37779058e7
root@8e37779058e7:/#
root@8e37779058e7:/# exit
exit
【使用CONTAINER Name 启动容器，效果和使用ID一样】
zx@kvm:~$ docker start -i u14v2
root@8e37779058e7:/#

---------
后台模式运行
zx@kvm:~$ docker run -d ubuntu:14.04 /bin/bash -c "echo hello world;"
f748368481abe16e34b57859f19e8a410b8b0e69aa289d147aaa7c780653d81c
zx@kvm:~$ docker logs f748368481ab	前12位ID
hello world
zx@kvm:~$

容器是否会长久运行，是和docker	run	指定的命令有关，和	-d	参数无关。

zx@kvm:~$ docker ps -a
CONTAINER ID        IMAGE                COMMAND                CREATED              STATUS                        PORTS               NAMES
f748368481ab        ubuntu:14.04         "/bin/bash -c 'echo    20 seconds ago       Exited (0) 20 seconds ago                         loving_hypatia
zx@kvm:~$ docker logs loving_hypatia	好像是给这个容器不光分配了一个ID，还起了一个名字
hello world
zx@kvm:~$

zx@kvm:~$ docker stop insane_goldstine
insane_goldstine

-------------

推荐使用	docker	exec	命令
zx@kvm:~$ docker start e50fabe33311
e50fabe33311
zx@kvm:~$
zx@kvm:~$ docker exec -it e50fabe33311 ls
bin  boot  dev  etc  fastboot  home  lib  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
zx@kvm:~$
zx@kvm:~$ docker exec -it e50fabe33311 bash
root@e50fabe33311:/#
root@e50fabe33311:/# exit
exit
zx@kvm:~$
zx@kvm:~$ docker ps		从这个	stdin	中	exit，不会导致容器的停止
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
e50fabe33311        ubuntu:v2           "/bin/bash"         9 minutes ago       Up 5 minutes                            u14v2-4
zx@kvm:~$

-----------------
Exited状态的容器，不能执行命令，需要先使用start启动，然后再exec执行命令
zx@kvm:~$ docker ps -a
CONTAINER ID        IMAGE                COMMAND                CREATED             STATUS                      PORTS               NAMES
e50fabe33311        ubuntu:v2            "/bin/bash"            15 hours ago        Up 15 hours                                     u14v2-4 
c1223a850ed5        ubuntu:v2            "/bin/bash"            16 hours ago        Exited (0) 16 hours ago                         u14v2-3 

zx@kvm:~$ docker exec -it c1223a850ed5 bash
FATA[0000] Error response from daemon: Container c1223a850ed5 is not running
zx@kvm:~$
zx@kvm:~$ docker start c1223a850ed5
c1223a850ed5
zx@kvm:~$
zx@kvm:~$ docker exec -it c1223a850ed5 bash
root@c1223a850ed5:/#
root@c1223a850ed5:/#


-----------------
docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
    rm        Remove one or more CONTAINERS		如果要删除一个运行中的容器，可以添加-f参数。Docker会发送SIGKILL信号给容器。
    rmi       Remove one or more IMAGES

docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]

docker history IMAGE


docker ps        List containers
	docker ps -a	all containers including Exited status
	docker ps		containers of Up status
	docker ps -l, --latest=false    Show the latest created container, include non-running
	docker ps -n=-1                 Show n last created containers, include non-running



docker start     Start a stopped container
	docker start CONTAINER ID  or container-NAMES


	
	
  -d, --daemon=false                   Enable daemon mode后台模式
	
	
docker logs      Fetch the logs of a container
	docker logs CONTAINER ID  or container-NAMES

  -f, --follow=false        Follow log output
  -t, --timestamps=false    Show timestamps
  --tail=all                Number of lines to show from the end of the logs


  
	
docker stop      Stop a running container	
	docker stop CONTAINER ID  or container-NAMES
	
	
docker restart   Restart a running container	
	
	
	？？？
docker attach    Attach to a running container
	attach之后，从这个	stdin	中	exit，会导致容器的停止


		
docker exec      Run a command in a running container
	Usage: docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
	Run a command in a running container
		  -d, --detach=false         Detached mode: run command in the background
		  -i, --interactive=false    Keep STDIN open even if not attached
		  -t, --tty=false            Allocate a pseudo-TTY


		  
docker kill      Kill a running container
		  
		  
docker search    Search for an image on the Docker Hub
docker pull      Pull an image or a repository from a Docker registry server
docker push      Push an image or a repository to a Docker registry server
		  




docker inspect   Return low-level information on a container or image
Usage: docker inspect [OPTIONS] CONTAINER|IMAGE [CONTAINER|IMAGE...]
	-f, --format=      Format the output using the given go template

zx@kvm:~$ docker inspect  7acd8a9f254f
[{
    .............
    "State": {
        ...............
        "Pid": 5241,


zx@kvm:~$ docker inspect -f '{{.State.Pid}}' 7acd8a9f254f
5241

	
	
	
docker run
  --rm=false                 Automatically remove the container when it exits



docker port      Lookup the public-facing port that is NAT-ed to PRIVATE_PORT
	Usage: docker port [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]
查看指定的容器的端口绑定到宿主机哪个端口上
$	docker	port	nostalgic_morse	5000
127.0.0.1:49155.



























		  
结合这两个命令以及ssh甚至pv的话，利用Linux强大的管道，我们可以写一个命令完成从一个机器将镜像迁移到另一个机器，并且带进度条的功能：
docker	save	<镜像名>	|	bzip2	|	pv	|	ssh	<用户名>@<主机名>	'cat	|	docker	load'




一个镜像能产生很多容器，那么这些容器是对硬盘的占用是怎么样的？
因为每个容器都有修改和运行结果，要保存这些必然要存储，那么如何高效的存储这些呢？



